# Generated by Django 4.2.13 on 2024-06-17 18:56

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import wagtail.fields


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("wagtailimages", "0025_alter_image_file_alter_rendition_file"),
        ("wagtailcore", "0090_formsubmission"),
    ]

    operations = [
        migrations.CreateModel(
            name="DirectoryInformationTree",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "page_title",
                    models.CharField(
                        default="Page title",
                        help_text="Title to put at the top of the page",
                        max_length=255,
                    ),
                ),
                (
                    "uri",
                    models.CharField(
                        help_text='URI to the LDAP server as an "ldap:" or "ldaps: URL',
                        max_length=200,
                        validators=[
                            django.core.validators.URLValidator(
                                schemes=["ldap", "ldaps"]
                            )
                        ],
                    ),
                ),
                (
                    "manager_dn",
                    models.CharField(
                        default="uid=admin,ou=system",
                        help_text="DN of the manager of the server",
                        max_length=200,
                    ),
                ),
                (
                    "manager_password",
                    models.CharField(
                        default="password",
                        help_text="Password of manager DN",
                        max_length=80,
                    ),
                ),
                (
                    "user_base",
                    models.CharField(
                        default="ou=users,o=organization",
                        help_text="Base DN where to find users",
                        max_length=600,
                    ),
                ),
                (
                    "user_scope",
                    models.IntegerField(
                        choices=[(0, "base"), (1, "one-level"), (2, "subtree")],
                        default=1,
                        help_text="Search scope for users",
                    ),
                ),
                (
                    "group_base",
                    models.CharField(
                        default="ou=groups,o=organization",
                        help_text="Base DN where to find groups",
                        max_length=600,
                    ),
                ),
                (
                    "group_scope",
                    models.IntegerField(
                        choices=[(0, "base"), (1, "one-level"), (2, "subtree")],
                        default=1,
                        help_text="Search scope for groups",
                    ),
                ),
                (
                    "creation_email_template",
                    models.TextField(
                        default='Hello!\n\nYour account, "{uid}", has been created for the {consortium}. To set the password for this account, you\'ll need to visit the following link within {natural_delta}:\n\n{link}\n\nPlease note that this link will expire on {expiration_time} (UTC). If you can\'t visit the link in that time, visit {url} and choose the "Forgotten password" option for a fresh link.\n\nThank you.\n',
                        help_text="Email template for end users' newly-created accounts",
                    ),
                ),
                (
                    "reset_request_email_template",
                    models.TextField(
                        default='Hello!\n\nSomeone, perhaps you, requested a reset of the password for the account "{uid}".\n\nTo reset the password for account "{uid}", you\'ll need to visit the following link within {natural_delta}:\n\n{link}\n\nPlease note that link will expire on {expiration_time} (UTC). If you can\'t visit the link in that time, simply return to {url} and restart the forgotten password process.\n\nNote that if you did not request to reset the password, then simply ignore this email.\n\nThank you.\n',
                        help_text="Email template for end users' requests to reset their passwords",
                    ),
                ),
                (
                    "forgotten_uid_template",
                    models.TextField(
                        default='Hello!\n\nSomeone, perhaps you, asked for the username for the {consortium} account that goes with this email address.\n\nThe username is: {uid}\n\nYou can visit {url} to change the password for "{uid}" (if you know it), or reset the password (if forgotten).\n\nNote that if you did not request this, then simply ignore this email.\n\nThank you.\n',
                        help_text="Email template for end users' to recover forgotten usernames, not forgotten passwords",
                    ),
                ),
                (
                    "help_address",
                    models.EmailField(
                        default="help@email.address",
                        help_text="Email address if users need help",
                        max_length=50,
                    ),
                ),
                (
                    "logo",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="dit_logo",
                        to="wagtailimages.image",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="ForgottenDetailsFormPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "intro",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Introductory text to appear above the form",
                    ),
                ),
                (
                    "outro",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Text to appear below the form"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="NameRequestFormPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "intro",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Introductory text to appear above the form",
                    ),
                ),
                (
                    "outro",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Text to appear below the form"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="PasswordChangeFormPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "intro",
                    wagtail.fields.RichTextField(
                        blank=True,
                        help_text="Introductory text to appear above the form",
                    ),
                ),
                (
                    "outro",
                    wagtail.fields.RichTextField(
                        blank=True, help_text="Text to appear below the form"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="EDRNDirectoryInformationTree",
            fields=[
                (
                    "directoryinformationtree_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="jpledrnbiokeyusermgmt.directoryinformationtree",
                    ),
                ),
                (
                    "dmcc_managed_email_template",
                    models.TextField(
                        blank=True,
                        default='Your account, "{uid}", is managed the Data Management and Coordinating Center (DMCC) of the Early Detection Research Network.\n\nTo reset the password on this account, please visit the DMCC website at this address:\n\nhttps://www.compass.fhcrc.org/edrns/pub/user/resetPwd.aspx?t=pwd&amp;t2=pwd2&amp;sub=form&amp;w=1&amp;p=3&amp;param=reset&amp;t3=pwd&amp;sub2=lift\n\nThank you.\n',
                        help_text="Email template to notify that theirs is a secure-site account",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("jpledrnbiokeyusermgmt.directoryinformationtree",),
        ),
        migrations.CreateModel(
            name="PasswordSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "reset_window",
                    models.IntegerField(
                        default=4320,
                        help_text="Number of minutes a user has to reset their password after sending the password reset email",
                    ),
                ),
                (
                    "site",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.site",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EmailSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "from_address",
                    models.EmailField(
                        default="no-reply@jpl.nasa.gov",
                        help_text="Address from which to send emails",
                        max_length=50,
                    ),
                ),
                (
                    "new_users_addresses",
                    models.CharField(
                        default="edrn-ic@jpl.nasa.gov",
                        help_text="Addresses (comma-separated) to notify when new users are created",
                        max_length=512,
                    ),
                ),
                (
                    "site",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.site",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email",
            },
        ),
    ]
